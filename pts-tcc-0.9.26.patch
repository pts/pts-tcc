--- orig/tcc-0.9.26/i386-gen.c	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/i386-gen.c	2023-06-28 11:53:53.244200179 +0200
@@ -437,24 +437,22 @@
         for(i = 0;i < fastcall_nb_regs; i++) {
             if (args_size <= 0)
                 break;
             o(0x58 + fastcall_regs_ptr[i]); /* pop r */
             /* XXX: incorrect for struct/floats */
             args_size -= 4;
         }
     }
     gcall_or_jmp(0);
 
-#ifdef TCC_TARGET_PE
     if ((func_sym->type.t & VT_BTYPE) == VT_STRUCT)
-        args_size -= 4;
-#endif
+        args_size -= 4;  /* The very first argument (now vtop[1]) is the pointer to the return value struct. We've already added 4 for it in the loop above. For compatibility with GCC, the called function clens it up from the stack. */
     if (args_size && func_call != FUNC_STDCALL)
         gadd_sp(args_size);
     vtop--;
 }
 
 #ifdef TCC_TARGET_PE
 #define FUNC_PROLOG_SIZE 10
 #else
 #define FUNC_PROLOG_SIZE 9
 #endif
@@ -519,20 +517,22 @@
             addr += size;
         }
         sym_push(sym->v & ~SYM_FIELD, type,
                  VT_LOCAL | lvalue_type(type->t), param_addr);
         param_index++;
     }
     func_ret_sub = 0;
     /* pascal type call ? */
     if (func_call == FUNC_STDCALL)
         func_ret_sub = addr - 8;
+    else if ((func_vt.t & VT_BTYPE) == VT_STRUCT)  /* Return with `ret 4' for compatibility with GCC. */
+        func_ret_sub = 4;
 #ifdef TCC_TARGET_PE
     else if (func_vc)
         func_ret_sub = 4;
 #endif
 
 #ifdef CONFIG_TCC_BCHECK
     /* leave some room for bound checking code */
     if (tcc_state->do_bounds_check) {
         oad(0xb8, 0); /* lbound section pointer */
         oad(0xb8, 0); /* call to function */
--- orig/tcc-0.9.26/libtcc.c	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/libtcc.c	2013-02-15 15:24:00.000000000 +0100
@@ -200,34 +200,40 @@
 ST_DATA int mem_cur_size;
 ST_DATA int mem_max_size;
 unsigned malloc_usable_size(void*);
 #endif
 
 PUB_FUNC void tcc_free(void *ptr)
 {
 #ifdef MEM_DEBUG
     mem_cur_size -= malloc_usable_size(ptr);
 #endif
+#ifdef CONFIG_MALLOC_VERBOSE
+    fprintf(stderr, "MV FREE(%p)\n", ptr);
+#endif
     free(ptr);
 }
 
 PUB_FUNC void *tcc_malloc(unsigned long size)
 {
     void *ptr;
     ptr = malloc(size);
     if (!ptr && size)
         tcc_error("memory full");
 #ifdef MEM_DEBUG
     mem_cur_size += malloc_usable_size(ptr);
     if (mem_cur_size > mem_max_size)
         mem_max_size = mem_cur_size;
 #endif
+#ifdef CONFIG_MALLOC_VERBOSE
+    fprintf(stderr, "MV MALLOC(%lu) = %p\n", (unsigned long)size, ptr);
+#endif
     return ptr;
 }
 
 PUB_FUNC void *tcc_mallocz(unsigned long size)
 {
     void *ptr;
     ptr = tcc_malloc(size);
     memset(ptr, 0, size);
     return ptr;
 }
@@ -240,40 +246,46 @@
 #endif
     ptr1 = realloc(ptr, size);
     if (!ptr1 && size)
         tcc_error("memory full");
 #ifdef MEM_DEBUG
     /* NOTE: count not correct if alloc error, but not critical */
     mem_cur_size += malloc_usable_size(ptr1);
     if (mem_cur_size > mem_max_size)
         mem_max_size = mem_cur_size;
 #endif
+#ifdef CONFIG_MALLOC_VERBOSE
+    fprintf(stderr, "MV REALLOC(%p, %lu) = %p\n", ptr, (unsigned long)size, ptr1);
+#endif
     return ptr1;
 }
 
 PUB_FUNC char *tcc_strdup(const char *str)
 {
     char *ptr;
     ptr = tcc_malloc(strlen(str) + 1);
     strcpy(ptr, str);
     return ptr;
 }
 
 PUB_FUNC void tcc_memstats(void)
 {
 #ifdef MEM_DEBUG
     printf("memory: %d bytes, max = %d bytes\n", mem_cur_size, mem_max_size);
 #endif
 }
 
+#undef free
 #define free(p) use_tcc_free(p)
+#undef malloc
 #define malloc(s) use_tcc_malloc(s)
+#undef realloc
 #define realloc(p, s) use_tcc_realloc(p, s)
 
 /********************************************************/
 /* dynarrays */
 
 ST_FUNC void dynarray_add(void ***ptab, int *nb_ptr, void *data)
 {
     int nb, nb_alloc;
     void **pp;
     
@@ -561,21 +573,21 @@
     va_list ap;
     va_start(ap, fmt);
     strcat_vprintf(buf, buf_size, fmt, ap);
     va_end(ap);
 }
 
 static void error1(TCCState *s1, int is_warning, const char *fmt, va_list ap)
 {
     char buf[2048];
     BufferedFile **pf, *f;
-    
+
     buf[0] = '\0';
     /* use upper file if inline ":asm:" or token ":paste:" */
     for (f = file; f && f->filename[0] == ':'; f = f->prev);
     if (f) {
         for(pf = s1->include_stack; pf < s1->include_stack_ptr; pf++)
             strcat_printf(buf, sizeof(buf), "In file included from %s:%d:\n",
                 (*pf)->filename, (*pf)->line_num);
         if (f->line_num > 0) {
             strcat_printf(buf, sizeof(buf), "%s:%d: ",
                 f->filename, f->line_num);
@@ -585,27 +597,27 @@
         }
     } else {
         strcat_printf(buf, sizeof(buf), "tcc: ");
     }
     if (is_warning)
         strcat_printf(buf, sizeof(buf), "warning: ");
     else
         strcat_printf(buf, sizeof(buf), "error: ");
     strcat_vprintf(buf, sizeof(buf), fmt, ap);
 
-    if (!s1->error_func) {
+    if (!s1 || !s1->error_func) {
         /* default case: stderr */
         fprintf(stderr, "%s\n", buf);
     } else {
         s1->error_func(s1->error_opaque, buf);
     }
-    if (!is_warning || s1->warn_error)
+    if (s1 && (!is_warning || s1->warn_error))
         s1->nb_errors++;
 }
 
 LIBTCCAPI void tcc_set_error_func(TCCState *s, void *error_opaque,
                         void (*error_func)(void *opaque, const char *msg))
 {
     s->error_opaque = error_opaque;
     s->error_func = error_func;
 }
 
@@ -622,21 +634,21 @@
 
 PUB_FUNC void tcc_error(const char *fmt, ...)
 {
     TCCState *s1 = tcc_state;
     va_list ap;
 
     va_start(ap, fmt);
     error1(s1, 0, fmt, ap);
     va_end(ap);
     /* better than nothing: in some cases, we accept to handle errors */
-    if (s1->error_set_jmp_enabled) {
+    if (s1 && s1->error_set_jmp_enabled) {
         longjmp(s1->error_jmp_buf, 1);
     } else {
         /* XXX: eliminate this someday */
         exit(1);
     }
 }
 
 PUB_FUNC void tcc_warning(const char *fmt, ...)
 {
     TCCState *s1 = tcc_state;
@@ -646,20 +658,42 @@
         return;
 
     va_start(ap, fmt);
     error1(s1, 1, fmt, ap);
     va_end(ap);
 }
 
 /********************************************************/
 /* I/O layer */
 
+#ifdef CONFIG_TCC_DATA  /**** pts ****/
+  extern char data_tcclibc[];
+  extern char data_crt1[];
+#  ifdef CONFIG_TCC_CRTIN
+    extern char data_crti[];
+    extern char data_crtn[];
+#  endif
+#endif
+
+int open_data(char *data)
+{
+    off_t seek_to = (off_t)data;
+    /* This works even if compressed with upx. */
+    int fd = open("/proc/self/mem", O_RDONLY | O_BINARY);
+    if (fd >= 0 && seek_to != lseek(fd, seek_to, SEEK_SET)) {
+        close(fd);
+        return -1;
+    } else {
+        return fd;
+    }
+}
+
 ST_FUNC void tcc_open_bf(TCCState *s1, const char *filename, int initlen)
 {
     BufferedFile *bf;
     int buflen = initlen ? initlen : IO_BUF_SIZE;
 
     bf = tcc_malloc(sizeof(BufferedFile) + buflen);
     bf->buf_ptr = bf->buffer;
     bf->buf_end = bf->buffer + initlen;
     bf->buf_end[0] = CH_EOB; /* put eob symbol */
     pstrcpy(bf->filename, sizeof(bf->filename), filename);
@@ -683,20 +717,32 @@
     }
     file = bf->prev;
     tcc_free(bf);
 }
 
 ST_FUNC int tcc_open(TCCState *s1, const char *filename)
 {
     int fd;
     if (strcmp(filename, "-") == 0)
         fd = 0, filename = "stdin";
+#ifdef CONFIG_TCC_DATA  /**** pts ****/
+    else if (strcmp(filename, "///tmp///LIBTCC1.a") == 0)
+        fd = open_data(data_tcclibc);
+    else if (strcmp(filename, "///tmp///crt1.o") == 0)
+        fd = open_data(data_crt1);
+#ifdef CONFIG_TCC_CRTIN  /**** pts ****/
+    else if (strcmp(filename, "///tmp///crti.o") == 0)
+        fd = open_data(data_crti);
+    else if (strcmp(filename, "///tmp///crtn.o") == 0)
+        fd = open_data(data_crtn);
+#endif  /* CONFIG_TCC_CRTIN */
+#endif  /* CONFIG_TCC_DATA */
     else
         fd = open(filename, O_RDONLY | O_BINARY);
     if ((s1->verbose == 2 && fd >= 0) || s1->verbose == 3)
         printf("%s %*s%s\n", fd < 0 ? "nf":"->",
                (int)(s1->include_stack_ptr - s1->include_stack), "", filename);
     if (fd < 0)
         return -1;
 
     tcc_open_bf(s1, filename, 0);
     file->fd = fd;
@@ -884,49 +930,57 @@
     cstr_free(&tokcstr);
     /* reset symbol stack */
     sym_free_first = NULL;
     /* cleanup from error/setjmp */
     macro_ptr = NULL;
 }
 
 LIBTCCAPI TCCState *tcc_new(void)
 {
     TCCState *s;
+#ifndef TCC_VERSION10000
     char buffer[100];
     int a,b,c;
+#endif
 
     tcc_cleanup();
 
     s = tcc_mallocz(sizeof(TCCState));
     if (!s)
         return NULL;
     tcc_state = s;
 #ifdef _WIN32
     tcc_set_lib_path_w32(s);
 #else
     tcc_set_lib_path(s, CONFIG_TCCDIR);
 #endif
     s->output_type = TCC_OUTPUT_MEMORY;
+    s->static_link = 1;  /**** pts ****/
     preprocess_new();
     s->include_stack_ptr = s->include_stack;
 
     /* we add dummy defines for some special macros to speed up tests
        and to have working defined() */
     define_push(TOK___LINE__, MACRO_OBJ, NULL, NULL);
     define_push(TOK___FILE__, MACRO_OBJ, NULL, NULL);
     define_push(TOK___DATE__, MACRO_OBJ, NULL, NULL);
     define_push(TOK___TIME__, MACRO_OBJ, NULL, NULL);
 
     /* define __TINYC__ 92X  */
+#ifdef TCC_VERSION10000
+#define VERSIONSTR(v) #v
+    tcc_define_symbol(s, "__TINYC__", VERSIONSTR(TCC_VERSION10000));
+#else
     sscanf(TCC_VERSION, "%d.%d.%d", &a, &b, &c);
     sprintf(buffer, "%d", a*10000 + b*100 + c);
     tcc_define_symbol(s, "__TINYC__", buffer);
+#endif
 
     /* standard defines */
     tcc_define_symbol(s, "__STDC__", NULL);
     tcc_define_symbol(s, "__STDC_VERSION__", "199901L");
 
     /* target defines */
 #if defined(TCC_TARGET_I386)
     tcc_define_symbol(s, "__i386__", NULL);
     tcc_define_symbol(s, "__i386", NULL);
     tcc_define_symbol(s, "i386", NULL);
@@ -978,22 +1032,24 @@
 #ifdef TCC_TARGET_PE
     tcc_define_symbol(s, "__WCHAR_TYPE__", "unsigned short");
 #else
     tcc_define_symbol(s, "__WCHAR_TYPE__", "int");
 #endif
 
 #ifndef TCC_TARGET_PE
     /* glibc defines */
     tcc_define_symbol(s, "__REDIRECT(name, proto, alias)", "name proto __asm__ (#alias)");
     tcc_define_symbol(s, "__REDIRECT_NTH(name, proto, alias)", "name proto __asm__ (#alias) __THROW");
+#if 0  /**** pts ****/
     /* default library paths */
     tcc_add_library_path(s, CONFIG_TCC_LIBPATHS);
+#endif
     /* paths for crt objects */
     tcc_split_path(s, (void ***)&s->crt_paths, &s->nb_crt_paths, CONFIG_TCC_CRTPREFIX);
 #endif
 
     /* no section zero */
     dynarray_add((void ***)&s->sections, &s->nb_sections, NULL);
 
     /* create standard sections */
     text_section = new_section(s, ".text", SHT_PROGBITS, SHF_ALLOC | SHF_EXECINSTR);
     data_section = new_section(s, ".data", SHT_PROGBITS, SHF_ALLOC | SHF_WRITE);
@@ -1036,25 +1092,27 @@
     /* free all sections */
     for(i = 1; i < s1->nb_sections; i++)
         free_section(s1->sections[i]);
     dynarray_reset(&s1->sections, &s1->nb_sections);
 
     for(i = 0; i < s1->nb_priv_sections; i++)
         free_section(s1->priv_sections[i]);
     dynarray_reset(&s1->priv_sections, &s1->nb_priv_sections);
         
     /* free any loaded DLLs */
+#if defined(TCC_IS_NATIVE) && defined(TCC_TARGET_PE)
     for ( i = 0; i < s1->nb_loaded_dlls; i++) {
         DLLReference *ref = s1->loaded_dlls[i];
         if ( ref->handle )
             dlclose(ref->handle);
     }
+#endif
     
     /* free loaded dlls array */
     dynarray_reset(&s1->loaded_dlls, &s1->nb_loaded_dlls);
 
     /* free library paths */
     dynarray_reset(&s1->library_paths, &s1->nb_library_paths);
     dynarray_reset(&s1->crt_paths, &s1->nb_crt_paths);
 
     /* free include paths */
     dynarray_reset(&s1->cached_includes, &s1->nb_cached_includes);
@@ -1145,36 +1203,36 @@
     if (!strcmp(ext, "s")) {
         /* non preprocessed assembler */
         ret = tcc_assemble(s1, 0);
         goto the_end;
     }
 #endif
 
     fd = file->fd;
     /* assume executable format: auto guess file type */
     size = read(fd, &ehdr, sizeof(ehdr));
-    lseek(fd, 0, SEEK_SET);
+    if (size > 0) lseek(fd, -size, SEEK_CUR);
     if (size <= 0) {
         tcc_error_noabort("could not read header");
         goto the_end;
     }
 
     if (size == sizeof(ehdr) &&
         ehdr.e_ident[0] == ELFMAG0 &&
         ehdr.e_ident[1] == ELFMAG1 &&
         ehdr.e_ident[2] == ELFMAG2 &&
         ehdr.e_ident[3] == ELFMAG3) {
 
         /* do not display line number if error */
         file->line_num = 0;
         if (ehdr.e_type == ET_REL) {
-            ret = tcc_load_object_file(s1, fd, 0);
+            ret = tcc_load_object_file(s1, fd, lseek(fd, 0, SEEK_CUR));
             goto the_end;
 
         }
 #ifndef TCC_TARGET_PE
         if (ehdr.e_type == ET_DYN) {
             if (s1->output_type == TCC_OUTPUT_MEMORY) {
 #ifdef TCC_IS_NATIVE
                 void *h;
                 h = dlopen(filename, RTLD_GLOBAL | RTLD_LAZY);
                 if (h)
@@ -1336,26 +1394,30 @@
         put_stabs("", 0, 0, 0, 0);
     }
 
 #ifdef TCC_TARGET_PE
     tcc_add_library_path(s, CONFIG_TCC_LIBPATHS);
 # ifdef _WIN32
     tcc_add_systemdir(s);
 # endif
 #else
     /* add libc crt1/crti objects */
+#  ifdef CONFIG_TCC_DATA
     if ((output_type == TCC_OUTPUT_EXE || output_type == TCC_OUTPUT_DLL) &&
         !s->nostdlib) {
         if (output_type != TCC_OUTPUT_DLL)
             tcc_add_crt(s, "crt1.o");
+#    ifdef CONFIG_TCC_CRTIN  /**** pts ****/
         tcc_add_crt(s, "crti.o");
+#    endif
     }
+#  endif
 #endif
     return 0;
 }
 
 LIBTCCAPI void tcc_set_lib_path(TCCState *s, const char *path)
 {
     tcc_free(s->tcc_lib_path);
     s->tcc_lib_path = tcc_strdup(path);
 }
 
--- orig/tcc-0.9.26/tcc.c	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/tcc.c	2023-06-24 10:47:57.576840425 +0200
@@ -19,21 +19,21 @@
  */
 
 #ifdef ONE_SOURCE
 #include "libtcc.c"
 #else
 #include "tcc.h"
 #endif
 
 static void help(void)
 {
-    printf("tcc version " TCC_VERSION " - Tiny C Compiler - Copyright (C) 2001-2006 Fabrice Bellard\n"
+    printf("pts-tcc v " TCC_VERSION " - Tiny C Compiler - Copyright (C) 2001-2006 Fabrice Bellard\n"
            "Usage: tcc [options...] [-o outfile] [-c] infile(s)...\n"
            "       tcc [options...] -run infile [arguments...]\n"
            "General options:\n"
            "  -c          compile only - generate an object file\n"
            "  -o outfile  set output filename\n"
            "  -run        run compiled source\n"
            "  -fflag      set or reset (with 'no-' prefix) 'flag' (see man page)\n"
            "  -Wwarning   set or reset (with 'no-' prefix) 'warning' (see man page)\n"
            "  -w          disable all warnings\n"
            "  -v          show version\n"
@@ -67,20 +67,37 @@
            "  -nostdinc   do not use standard system include paths\n"
            "  -nostdlib   do not link with standard crt and libraries\n"
            "  -Bdir       use 'dir' as tcc internal library and include path\n"
            "  -MD         generate target dependencies for make\n"
            "  -MF depfile put generated dependencies here\n"
            );
 }
 
 /* re-execute the i386/x86_64 cross-compilers with tcc -m32/-m64: */
 #if defined TCC_TARGET_I386 || defined TCC_TARGET_X86_64
+#ifdef CONFIG_NO_EXEC
+static void exec_other_tcc(TCCState *s, char **argv, const char *optarg) {
+    switch (atoi(optarg)) {
+        case 0: /* ignore -march etc. */
+            break;
+#ifdef TCC_TARGET_I386
+        case 32: break;
+        case 64:
+#else
+        case 64: break;
+        case 32:
+#endif
+        default:
+            tcc_error("unsupported option \"-m%s\"", optarg);
+    }
+}
+#else
 #ifdef _WIN32
 #include <process.h>
 static int execvp_win32(const char *prog, char **argv)
 {
     int ret = spawnvp(P_NOWAIT, prog, (char const*const*)argv);
     if (-1 == ret)
         return ret;
     cwait(&ret, ret, WAIT_CHILD);
     exit(ret);
 }
@@ -109,20 +126,21 @@
                     printf("tcc: using '%s'\n", child_name), fflush(stdout);
                 execvp(argv[0] = child_path, argv);
             }
             tcc_error("'%s' not found", child_name);
         case 0: /* ignore -march etc. */
             break;
         default:
             tcc_warning("unsupported option \"-m%s\"", optarg);
     }
 }
+#endif  /* else CONFIG_NO_EXEC */
 #else
 #define exec_other_tcc(s, argv, optarg)
 #endif
 
 static void gen_makedeps(TCCState *s, const char *target, const char *filename)
 {
     FILE *depout;
     char buf[1024], *ext;
     int i;
 
@@ -183,21 +201,21 @@
     int i;
     printf("%s:\n%s", msg, nb_paths ? "" : "  -\n");
     for(i = 0; i < nb_paths; i++)
         printf("  %s\n", paths[i]);
 }
 
 static void display_info(TCCState *s, int what)
 {
     switch (what) {
     case 0:
-        printf("tcc version %s ("
+        printf("pts-tcc version %s ("
 #ifdef TCC_TARGET_I386
         "i386"
 # ifdef TCC_TARGET_PE
         " Win32"
 # endif
 #elif defined TCC_TARGET_X86_64
         "x86-64"
 # ifdef TCC_TARGET_PE
         " Win64"
 # endif
--- orig/tcc-0.9.26/tccelf.c	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/tccelf.c	2023-06-25 13:47:51.407466022 +0200
@@ -766,22 +766,22 @@
             *(int *)ptr += s1->sym_attrs[sym_index].got_offset;
             break;
         case R_ARM_COPY:
             break;
         case R_ARM_V4BX:
             /* trade Thumb support for ARMv4 support */
             if ((0x0ffffff0 & *(int*)ptr) == 0x012FFF10)
                 *(int*)ptr ^= 0xE12FFF10 ^ 0xE1A0F000; /* BX Rm -> MOV PC, Rm */
             break;
         default:
-            fprintf(stderr,"FIXME: handle reloc type %x at %x [%p] to %x\n",
-                type, (unsigned)addr, ptr, (unsigned)val);
+            fprintf(stderr,"FIXME: handle reloc type %x at %x [0x%x] to %x\n",
+                type, (unsigned)addr, (unsigned)ptr, (unsigned)val);
             break;
 #elif defined(TCC_TARGET_C67)
         case R_C60_32:
             *(int *)ptr += val;
             break;
         case R_C60LO16:
             {
                 uint32_t orig;
                 
                 /* put the low 16 bits of the absolute address */
@@ -792,22 +792,22 @@
                 
                 //patch both at once - assumes always in pairs Low - High
                 
                 *(int *) ptr    = (*(int *) ptr    & (~(0xffff << 7)) ) |  (((val+orig)      & 0xffff) << 7);
                 *(int *)(ptr+4) = (*(int *)(ptr+4) & (~(0xffff << 7)) ) | ((((val+orig)>>16) & 0xffff) << 7);
             }
             break;
         case R_C60HI16:
             break;
         default:
-            fprintf(stderr,"FIXME: handle reloc type %x at %x [%p] to %x\n",
-                type, (unsigned)addr, ptr, (unsigned)val);
+            fprintf(stderr,"FIXME: handle reloc type %x at %x [0x%x] to %x\n",
+                type, (unsigned)addr, (unsigned)yptr, (unsigned)val);
             break;
 #elif defined(TCC_TARGET_X86_64)
         case R_X86_64_64:
             if (s1->output_type == TCC_OUTPUT_DLL) {
                 qrel->r_info = ELFW(R_INFO)(0, R_X86_64_RELATIVE);
                 qrel->r_addend = *(long long *)ptr + val;
                 qrel++;
             }
             *(long long *)ptr += val;
             break;
@@ -1339,43 +1339,55 @@
         pinit[0] = 0xe8;
         put32(pinit + 1, -4);
         sym_index = find_elf_sym(symtab_section, "__bound_init");
         put_elf_reloc(symtab_section, init_section,
                       init_section->data_offset - 4, R_386_PC32, sym_index);
     }
 #endif
 #endif
 }
 
+#if defined(CONFIG_USE_LIGCC) && !defined(WITHOUT_LIBTCC)
 static inline int tcc_add_support(TCCState *s1, const char *filename)
 {
     char buf[1024];
     snprintf(buf, sizeof(buf), "%s/%s", s1->tcc_lib_path, filename);
     return tcc_add_file(s1, buf);
 }
+#endif
 
 /* add tcc runtime libraries */
 ST_FUNC void tcc_add_runtime(TCCState *s1)
 {
     tcc_add_bcheck(s1);
 
     /* add libc */
     if (!s1->nostdlib) {
+#if 0 /**** pts ****/
         tcc_add_library(s1, "c");
+#endif
 #ifdef CONFIG_USE_LIBGCC
+  #if 0 /**** pts ****/
         tcc_add_file(s1, TCC_LIBGCC);
-#elif !defined WITHOUT_LIBTCC
+  #elif !defined WITHOUT_LIBTCC
         tcc_add_support(s1, "libtcc1.a");
+  #endif
+#else
+  #ifdef CONFIG_TCC_DATA
+        tcc_add_file(s1, "///tmp///LIBTCC1.a");
+  #endif
 #endif
+#ifdef CONFIG_TCC_CRTIN  /**** pts ****/
         /* add crt end if not memory output */
         if (s1->output_type != TCC_OUTPUT_MEMORY)
             tcc_add_crt(s1, "crtn.o");
+#endif
     }
 }
 
 /* add various standard linker symbols (must be done after the
    sections are filled (for example after allocating common
    symbols)) */
 ST_FUNC void tcc_add_linker_symbols(TCCState *s1)
 {
     char buf[1024];
     int i;
@@ -2333,21 +2345,21 @@
     }
     return ret;
 }
 
 static void *load_data(int fd, unsigned long file_offset, unsigned long size)
 {
     void *data;
 
     data = tcc_malloc(size);
     lseek(fd, file_offset, SEEK_SET);
-    read(fd, data, size);
+    if (size != read(fd, data, size)) abort();
     return data;
 }
 
 typedef struct SectionMergeInfo {
     Section *s;            /* corresponding existing section */
     unsigned long offset;  /* offset of the new section in the existing section */
     uint8_t new_section;       /* true if section 's' was added */
     uint8_t link_once;         /* true if link once section */
 } SectionMergeInfo;
 
@@ -2650,21 +2662,21 @@
     char ar_size[10];           /* file size, printed as decimal */
     char ar_fmag[2];            /* should contain ARFMAG */
 } ArchiveHeader;
 
 static int get_be32(const uint8_t *b)
 {
     return b[3] | (b[2] << 8) | (b[1] << 16) | (b[0] << 24);
 }
 
 /* load only the objects which resolve undefined symbols */
-static int tcc_load_alacarte(TCCState *s1, int fd, int size)
+static int tcc_load_alacarte(TCCState *s1, int fd, int size, int base_off)
 {
     int i, bound, nsyms, sym_index, off, ret;
     uint8_t *data;
     const char *ar_names, *p;
     const uint8_t *ar_index;
     ElfW(Sym) *sym;
 
     data = tcc_malloc(size);
     if (read(fd, data, size) != size)
         goto fail;
@@ -2672,21 +2684,21 @@
     ar_index = data + 4;
     ar_names = ar_index + nsyms * 4;
 
     do {
         bound = 0;
         for(p = ar_names, i = 0; i < nsyms; i++, p += strlen(p)+1) {
             sym_index = find_elf_sym(symtab_section, p);
             if(sym_index) {
                 sym = &((ElfW(Sym) *)symtab_section->data)[sym_index];
                 if(sym->st_shndx == SHN_UNDEF) {
-                    off = get_be32(ar_index + i * 4) + sizeof(ArchiveHeader);
+                    off = base_off + get_be32(ar_index + i * 4) + sizeof(ArchiveHeader);
 #if 0
                     printf("%5d\t%s\t%08x\n", i, p, sym->st_shndx);
 #endif
                     ++bound;
                     lseek(fd, off, SEEK_SET);
                     if(tcc_load_object_file(s1, fd, off) < 0) {
                     fail:
                         ret = -1;
                         goto the_end;
                     }
@@ -2718,33 +2730,36 @@
         if (len == 0)
             break;
         if (len != sizeof(hdr)) {
             tcc_error_noabort("invalid archive");
             return -1;
         }
         memcpy(ar_size, hdr.ar_size, sizeof(hdr.ar_size));
         ar_size[sizeof(hdr.ar_size)] = '\0';
         size = strtol(ar_size, NULL, 0);
         memcpy(ar_name, hdr.ar_name, sizeof(hdr.ar_name));
+        if (hdr.ar_name[0] == '\001' && hdr.ar_name[1] == '\000')
+            break;  /**** pts ****/ /* end of tcclibc.a */
         for(i = sizeof(hdr.ar_name) - 1; i >= 0; i--) {
             if (ar_name[i] != ' ')
                 break;
         }
         ar_name[i + 1] = '\0';
-        //        printf("name='%s' size=%d %s\n", ar_name, size, ar_size);
+        /* printf("name='%s' size=%d %s\n", ar_name, size, ar_size); */
         file_offset = lseek(fd, 0, SEEK_CUR);
         /* align to even */
         size = (size + 1) & ~1;
         if (!strcmp(ar_name, "/")) {
             /* coff symbol table : we handle it */
-            if(s1->alacarte_link)
-                return tcc_load_alacarte(s1, fd, size);
+            if(s1->alacarte_link) {
+                return tcc_load_alacarte(s1, fd, size, file_offset - sizeof(hdr) - sizeof(magic));
+            }
         } else if (!strcmp(ar_name, "//") ||
                    !strcmp(ar_name, "__.SYMDEF") ||
                    !strcmp(ar_name, "__.SYMDEF/") ||
                    !strcmp(ar_name, "ARFILENAMES/")) {
             /* skip symbol table or archive names */
         } else {
             if (tcc_load_object_file(s1, fd, file_offset) < 0)
                 return -1;
         }
         lseek(fd, file_offset + size, SEEK_SET);
@@ -3117,13 +3132,12 @@
                     tcc_error_noabort("unexpected end of file");
                     return -1;
                 } else if (t == ')') {
                     break;
                 }
             }
         } else {
             return -1;
         }
     }
-    return 0;
 }
 #endif /* ndef TCC_TARGET_PE */
--- orig/tcc-0.9.26/tccgen.c	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/tccgen.c	2018-09-14 15:11:25.605105265 +0200
@@ -4123,22 +4123,22 @@
                 if (is_float(vtop->type.t)) {
                     rc = RC_FLOAT;
 #ifdef TCC_TARGET_X86_64
                     if ((vtop->type.t & VT_BTYPE) == VT_LDOUBLE) {
                         rc = RC_ST0;
                     }
 #endif
                 }
                 else
                     rc = RC_INT;
-                    gv(rc);
-                    save_regs(1);
+                gv(rc);
+                save_regs(1);
             }
             if (tok == ':' && gnu_ext) {
                 gv_dup();
                 tt = gtst(1, 0);
             } else {
                 tt = gtst(1, 0);
                 gexpr();
             }
             type1 = vtop->type;
             sv = *vtop; /* save value to handle it later */
@@ -4894,20 +4894,21 @@
             (bt == VT_BYTE ||
              bt == VT_SHORT ||
              bt == VT_DOUBLE ||
              bt == VT_LDOUBLE ||
              bt == VT_LLONG ||
              (bt == VT_INT && bit_size != 32)))
             tcc_error("initializer element is not computable at load time");
         switch(bt) {
         case VT_BOOL:
             vtop->c.i = (vtop->c.i != 0);
+            /*fallthrough*/
         case VT_BYTE:
             *(char *)ptr |= (vtop->c.i & bit_mask) << bit_pos;
             break;
         case VT_SHORT:
             *(short *)ptr |= (vtop->c.i & bit_mask) << bit_pos;
             break;
         case VT_DOUBLE:
             *(double *)ptr = vtop->c.d;
             break;
         case VT_LDOUBLE:
--- orig/tcc-0.9.26/tccpp.c	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/tccpp.c	2023-06-25 13:47:48.515462155 +0200
@@ -242,20 +242,35 @@
         ts = *pts;
         if (!ts)
             break;
         if (ts->len == len && !memcmp(ts->str, str, len))
             return ts;
         pts = &(ts->hash_next);
     }
     return tok_alloc_new(pts, str, len);
 }
 
+#if defined(_WIN32) || defined(__MINILIBC686__)
+static void ull_to_decimal(unsigned long long u, char *s) {
+  char *p = s, c;
+  do {
+    *p++ = (char)('0' + (u % 10));
+  } while ((u /= 10) != 0);
+  *p-- = '\0';
+  while (p > s) {
+    c = *p;
+    *p-- = *s;
+    *s++ = c;
+  }
+}
+#endif
+
 /* XXX: buffer overflow */
 /* XXX: float tokens */
 ST_FUNC char *get_tok_str(int v, CValue *cv)
 {
     static char buf[STRING_MAX_SIZE + 1];
     static CString cstr_buf;
     CString *cstr;
     char *p;
     int i, len;
 
@@ -267,43 +282,45 @@
 
     switch(v) {
     case TOK_CINT:
     case TOK_CUINT:
         /* XXX: not quite exact, but only useful for testing */
         sprintf(p, "%u", cv->ui);
         break;
     case TOK_CLLONG:
     case TOK_CULLONG:
         /* XXX: not quite exact, but only useful for testing  */
-#ifdef _WIN32
-        sprintf(p, "%u", (unsigned)cv->ull);
+#if defined(_WIN32) || defined(__MINILIBC686__)
+        ull_to_decimal(cv->ull, p);
 #else
-        sprintf(p, "%Lu", cv->ull);
+        sprintf(p, "%llu", cv->ull);
 #endif
         break;
     case TOK_LCHAR:
         cstr_ccat(&cstr_buf, 'L');
+        /*fallthrough*/
     case TOK_CCHAR:
         cstr_ccat(&cstr_buf, '\'');
         add_char(&cstr_buf, cv->i);
         cstr_ccat(&cstr_buf, '\'');
         cstr_ccat(&cstr_buf, '\0');
         break;
     case TOK_PPNUM:
         cstr = cv->cstr;
         len = cstr->size - 1;
         for(i=0;i<len;i++)
             add_char(&cstr_buf, ((unsigned char *)cstr->data)[i]);
         cstr_ccat(&cstr_buf, '\0');
         break;
     case TOK_LSTR:
         cstr_ccat(&cstr_buf, 'L');
+        /*fallthrough*/
     case TOK_STR:
         cstr = cv->cstr;
         cstr_ccat(&cstr_buf, '\"');
         if (v == TOK_STR) {
             len = cstr->size - 1;
             for(i=0;i<len;i++)
                 add_char(&cstr_buf, ((unsigned char *)cstr->data)[i]);
         } else {
             len = (cstr->size / sizeof(nwchar_t)) - 1;
             for(i=0;i<len;i++)
@@ -1761,20 +1778,26 @@
 }
 
 static void bn_zero(unsigned int *bn)
 {
     int i;
     for(i=0;i<BN_SIZE;i++) {
         bn[i] = 0;
     }
 }
 
+double ldexp(double d, int exp) {  /**** pts ****/
+  while (exp > 0) { d *= 2; --exp; }
+  while (exp < 0) { d /= 2; ++exp; }
+  return d;
+}
+
 /* parse number in null terminated string 'p' and return it in the
    current token */
 static void parse_number(const char *p)
 {
     int b, t, shift, frac_bits, s, exp_val, ch;
     char *q;
     unsigned int bn[BN_SIZE];
     double d;
 
     /* number */
--- orig/tcc-0.9.26/tcc.h	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/tcc.h	2023-06-26 03:28:57.422540523 +0200
@@ -28,30 +28,27 @@
 #include "tccboot.h"
 #define CONFIG_TCC_STATIC
 #else
 
 #include <stdlib.h>
 #include <stdio.h>
 #include <stdarg.h>
 #include <string.h>
 #include <errno.h>
 #include <math.h>
-#include <signal.h>
 #include <fcntl.h>
 #include <setjmp.h>
 #include <time.h>
 
 #ifndef _WIN32
 # include <unistd.h>
 # include <sys/time.h>
-# include <sys/ucontext.h>
-# include <sys/mman.h>
 # ifndef CONFIG_TCC_STATIC
 #  include <dlfcn.h>
 # endif
 #else
 # include <windows.h>
 # include <sys/timeb.h>
 # include <io.h> /* open, close etc. */
 # include <direct.h> /* getcwd */
 # ifdef __GNUC__
 #  include <stdint.h>
@@ -129,50 +126,64 @@
 #if !defined(TCC_TARGET_ARM) && !defined(TCC_TARGET_C67)
 #define CONFIG_TCC_ASM
 #endif
 
 /* object format selection */
 #if defined(TCC_TARGET_C67)
 #define TCC_TARGET_COFF
 #endif
 
 /* only native compiler supports -run */
-#if defined _WIN32 == defined TCC_TARGET_PE
+#undef TCC_IS_NATIVE
+#ifdef CONFIG_NO_RUN
+#elif defined _WIN32 == defined TCC_TARGET_PE
 # if (defined __i386__ || defined _X86_) && defined TCC_TARGET_I386
 #  define TCC_IS_NATIVE
 # elif (defined __x86_64__ || defined _AMD64_) && defined TCC_TARGET_X86_64
 #  define TCC_IS_NATIVE
 # elif defined __arm__ && defined TCC_TARGET_ARM
 #  define TCC_IS_NATIVE
 # endif
 #endif
 
+#ifdef TCC_IS_NATIVE
+#  include <signal.h>
+#  ifndef _WIN32
+#    include <sys/ucontext.h>
+#    include <sys/mman.h>
+#  endif
+#endif
+
 #if defined TCC_IS_NATIVE && !defined CONFIG_TCCBOOT
 # define CONFIG_TCC_BACKTRACE
 #endif
 
 /* ------------ path configuration ------------ */
 
 #ifndef CONFIG_SYSROOT
 # define CONFIG_SYSROOT ""
 #endif
 #ifndef CONFIG_TCCDIR
 # define CONFIG_TCCDIR "."
 #endif
 #ifndef CONFIG_LDDIR
 # define CONFIG_LDDIR "lib"
 #endif
 
 /* path to find crt1.o, crti.o and crtn.o */
+#if 0 /**** pts ****/
 #ifndef CONFIG_TCC_CRTPREFIX
 # define CONFIG_TCC_CRTPREFIX CONFIG_SYSROOT "/usr/" CONFIG_LDDIR
 #endif
+#else
+#define CONFIG_TCC_CRTPREFIX "///tmp//"
+#endif
 
 /* Below: {B} is substituted by CONFIG_TCCDIR (rsp. -B option) */
 
 /* system include paths */
 #ifndef CONFIG_TCC_SYSINCLUDEPATHS
 # ifdef TCC_TARGET_PE
 #  define CONFIG_TCC_SYSINCLUDEPATHS "{B}/include;{B}/include/winapi"
 # elif defined CONFIG_MULTIARCHDIR
 #  define CONFIG_TCC_SYSINCLUDEPATHS \
         CONFIG_SYSROOT "/usr/local/include" \
--- orig/tcc-0.9.26/configure	2013-02-15 15:24:00.000000000 +0100
+++ tcc-0.9.26/configure	2018-09-14 15:07:28.292462995 +0200
@@ -39,21 +39,21 @@
 mingw32="no"
 LIBSUF=".a"
 EXESUF=""
 tcc_sysincludepaths=""
 tcc_libpaths=""
 tcc_crtprefix=""
 tcc_elfinterp=""
 tcc_lddir=
 confvars=
 
-cpu=`uname -m`
+cpu=i686
 
 # OS specific
 targetos=`uname -s`
 case $targetos in
   MINGW32*)  mingw32=yes;;
   DragonFly) noldl=yes;;
   OpenBSD)   noldl=yes;;
   *) ;;
 esac
 
